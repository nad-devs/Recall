// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique // Required and unique identifier
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User preferences and settings
  timezone      String    @default("UTC")
  language      String    @default("en")
  theme         String    @default("system")
  
  // Subscription and usage
  plan          String    @default("free") // free, pro, enterprise
  usageCount    Int       @default(0)
  lastActiveAt  DateTime  @default(now())
  
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  feedback      Feedback[]
  concepts      Concept[]
  conversations Conversation[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Feedback and Analytics
model Feedback {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // "bug", "feature", "general", "rating"
  rating      Int?     // 1-5 stars
  message     String
  page        String?  // Which page the feedback was submitted from
  userAgent   String?
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Analytics {
  id          String   @id @default(cuid())
  userId      String?  // Optional for anonymous events
  event       String   // "page_view", "concept_created", "conversation_analyzed", etc.
  properties  String   // JSON string of event properties
  timestamp   DateTime @default(now())
  sessionId   String?
  userAgent   String?
  ipAddress   String?
}

model Category {
  id        String     @id @default(cuid())
  name      String
  parentId  String?
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children  Category[] @relation("CategoryHierarchy")
  concepts  Concept[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Concept {
  id              String    @id @default(cuid())
  title           String
  category        String
  summary         String
  details         String    // Store as JSON string
  keyPoints       String    // Store as JSON string
  examples        String    // Store as JSON string
  codeSnippets    CodeSnippet[]
  relatedConcepts String    // Store as JSON string
  relationships   String    // Store as JSON string
  confidenceScore Float     @default(0.5)
  lastUpdated     DateTime  @default(now())
  isPlaceholder   Boolean   @default(false)
  embedding       Unsupported("vector(1536)")? // For OpenAI's text-embedding-3-small
  
  // User isolation
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Review-related fields
  reviewCount     Int       @default(0)
  lastReviewed    DateTime? 
  nextReviewDate  DateTime?
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String
  categories      Category[]
  occurrences     Occurrence[]
  
  // Enhanced learning and content fields
  masteryLevel        String?   // "BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT"
  learningProgress    Int       @default(0) // 0-100%
  practiceCount       Int       @default(0)
  lastPracticed       DateTime?
  difficultyRating    Int?      // 1-5 stars
  timeToMaster        Int?      // estimated hours
  
  // Rich content (stored as JSON strings)
  videoResources      String    @default("[]") // URLs to tutorial videos
  documentationLinks  String    @default("[]") // Official docs, articles
  practiceExercises   String    @default("[]") // Links to coding challenges
  realWorldExamples   String    @default("[]") // Industry use cases
  prerequisites       String    @default("[]") // Concept IDs that should be learned first
  
  // Personal learning data
  personalNotes       String?   // Private notes and insights
  mnemonics          String?   // Memory aids
  commonMistakes     String    @default("[]") // Things to watch out for
  personalExamples   String    @default("[]") // User's own examples
  learningTips       String    @default("[]")
  
  // Usage context
  useCases           String    @default("[]") // When to use this concept
  industries         String    @default("[]") // Where it's commonly used
  tools              String    @default("[]") // Related tools/frameworks
  projectsUsedIn     String    @default("[]") // Personal projects where applied
  
  // User interaction
  tags               String    @default("[]") // User-defined tags
  bookmarked         Boolean   @default(false)
  personalRating     Int?      // Personal rating 1-5
  
  createdAt          DateTime  @default(now())
}

model Conversation {
  id          String    @id @default(cuid())
  text        String
  title       String    @default("")
  summary     String
  createdAt   DateTime  @default(now())
  
  // User isolation
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  concepts    Concept[]
  occurrences Occurrence[]
}

model Occurrence {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conceptId      String
  concept        Concept      @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model CodeSnippet {
  id          String   @id @default(cuid())
  language    String
  description String
  code        String
  concept     Concept  @relation(fields: [conceptId], references: [id])
  conceptId   String
} 