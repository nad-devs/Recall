"use client"
import { useState, useEffect } from "react"
import { TopicQuiz, type QuizQuestion } from "@/components/topic-quiz"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { CheckCircle, XCircle, Brain, ArrowLeft } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

// Mock function to generate quiz questions for a topic
function generateQuestionsForTopic(topic: string): QuizQuestion[] {
  // In a real app, this would come from an API or be generated by AI
  return [
    {
      topic,
      question: `What is the main focus of ${topic}?`,
      answer: `Understanding ${topic} concepts`,
      options: [
        `Understanding ${topic} concepts`,
        `Memorizing ${topic} facts`,
        `Avoiding ${topic} altogether`,
        `Replacing ${topic} with alternatives`,
      ],
    },
    {
      topic,
      question: `Which of these is most closely related to ${topic}?`,
      answer: `Advanced ${topic} techniques`,
      options: [`Advanced ${topic} techniques`, `Basic cooking skills`, `Ancient history`, `Modern art`],
    },
    {
      topic,
      question: `What's a common challenge when working with ${topic}?`,
      answer: `Optimizing ${topic} performance`,
      options: [
        `Finding good restaurants`,
        `Optimizing ${topic} performance`,
        `Learning a new language`,
        `Physical fitness`,
      ],
    },
  ]
}

interface TopicQuizzesProps {
  topics: string[]
  onComplete: (rememberedTopics: string[], reviewTopics: string[]) => void
  onBack: () => void
}

export function TopicQuizzes({ topics, onComplete, onBack }: TopicQuizzesProps) {
  const [currentTopicIndex, setCurrentTopicIndex] = useState(0)
  const [rememberedTopics, setRememberedTopics] = useState<string[]>([])
  const [reviewTopics, setReviewTopics] = useState<string[]>([])
  const [showSummary, setShowSummary] = useState(false)
  const [quizQuestions, setQuizQuestions] = useState<Record<string, QuizQuestion[]>>({})

  const currentTopic = topics[currentTopicIndex]

  // Generate quiz questions for each topic
  useEffect(() => {
    const questions: Record<string, QuizQuestion[]> = {}
    topics.forEach((topic) => {
      questions[topic] = generateQuestionsForTopic(topic)
    })
    setQuizQuestions(questions)
  }, [topics])

  const handleTopicComplete = (topic: string, remembered: boolean) => {
    if (remembered) {
      setRememberedTopics([...rememberedTopics, topic])
    } else {
      setReviewTopics([...reviewTopics, topic])
    }

    if (currentTopicIndex < topics.length - 1) {
      setCurrentTopicIndex(currentTopicIndex + 1)
    } else {
      setShowSummary(true)
    }
  }

  const handleFinish = () => {
    onComplete(rememberedTopics, reviewTopics)
  }

  if (showSummary) {
    return (
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
        <Card className="w-full shadow-lg border-primary/10 overflow-hidden">
          <div className="bg-gradient-to-r from-primary/20 to-primary/5 p-1"></div>
          <CardHeader>
            <CardTitle className="text-2xl flex items-center">
              <Brain className="mr-3 h-6 w-6 text-primary" /> Quiz Summary
            </CardTitle>
            <CardDescription>Here's how you did on the topic quizzes</CardDescription>
          </CardHeader>
          <CardContent className="space-y-8">
            <div>
              <h3 className="text-lg font-semibold mb-4 flex items-center text-green-600 dark:text-green-400">
                <CheckCircle className="mr-2 h-5 w-5" /> Topics You Know Well ({rememberedTopics.length})
              </h3>
              {rememberedTopics.length > 0 ? (
                <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4 border border-green-200 dark:border-green-800">
                  <ul className="space-y-2 list-disc pl-5">
                    {rememberedTopics.map((topic, index) => (
                      <li key={`remembered-${index}`}>{topic}</li>
                    ))}
                  </ul>
                </div>
              ) : (
                <div className="bg-muted/30 rounded-lg p-4 text-center">
                  <p className="text-muted-foreground text-sm italic">No topics mastered yet.</p>
                </div>
              )}
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-4 flex items-center text-amber-600 dark:text-amber-400">
                <XCircle className="mr-2 h-5 w-5" /> Topics To Review ({reviewTopics.length})
              </h3>
              {reviewTopics.length > 0 ? (
                <div className="bg-amber-50 dark:bg-amber-900/20 rounded-lg p-4 border border-amber-200 dark:border-amber-800">
                  <ul className="space-y-2 list-disc pl-5">
                    {reviewTopics.map((topic, index) => (
                      <li key={`review-${index}`}>{topic}</li>
                    ))}
                  </ul>
                </div>
              ) : (
                <div className="bg-muted/30 rounded-lg p-4 text-center">
                  <p className="text-muted-foreground text-sm italic">No topics need review.</p>
                </div>
              )}
            </div>
          </CardContent>
          <CardFooter className="flex justify-between items-center border-t bg-muted/20 p-4">
            <Button variant="outline" onClick={onBack} className="shadow-sm">
              <ArrowLeft className="mr-2 h-4 w-4" /> Back to Analysis
            </Button>
            <Button onClick={handleFinish}>Save Results</Button>
          </CardFooter>
        </Card>
      </motion.div>
    )
  }

  return (
    <AnimatePresence mode="wait">
      {currentTopic && quizQuestions[currentTopic] && (
        <motion.div
          key={currentTopic}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.3 }}
        >
          <TopicQuiz topic={currentTopic} questions={quizQuestions[currentTopic]} onComplete={handleTopicComplete} />
          <div className="mt-4 text-center text-sm text-muted-foreground">
            Topic {currentTopicIndex + 1} of {topics.length}
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}
